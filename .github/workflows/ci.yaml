---
name: CI

on:
  # Scan on-demand through GitHub Actions interface:
  workflow_dispatch: {}
  # Scan workflow call:
  workflow_call:
  # Scan mainline branches and report all findings:
  push:
    branches: ["main"]
  # Scan changed files in PRs (diff-aware scanning):
  pull_request:
    branches: ["main"]

# Don't grant any access by default
permissions: {}

env:
  TARGET_REF: ${{ github.head_ref || github.ref_name }}
  GO111MODULE: on
  GOPRIVATE: ""
  APP: "co-pilot-reporting"
  COV: "./coverage"
  GCOV: "./coverage.gcov"
  LCOV: "./coverage.lcov"
  VPATH: "github.com/gdcorp-engineering/co-pilot-reporting/internal/version"

jobs:
  ci:
    name: ci

    strategy:
      matrix:
        go-version: ['stable']  # only use ONE version of go here or the upload-artifact will fail

    runs-on: ['ubuntu-latest']

    ############################################
    # Grant minimal permissions
    ############################################
    permissions:
      contents: read
      statuses: write

    steps:
      - name: actions/checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          # Needed to get tags for versioning
          fetch-depth: 0

      - name: actions/setup-go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34  # v5.3.0
        with:
          go-version: ${{ matrix.go-version }}

      # nslookup
      - name: nslookup(s)
        continue-on-error: true
        shell: bash
        run: |
          set -x
          nslookup sso.int.gdcorp.tools

      # nslookup
      - name: nslookup(s)
        continue-on-error: true
        shell: bash
        run: |
          set -x
          nslookup cds-api.int.gdcorp.tools

      # Show the Go environment
      - name: report go environment
        shell: bash
        run: |
          set -x
          go version
          go env
          go clean --cache
          go mod tidy

      - name: golangci/golangci-lint-action
        uses: golangci/golangci-lint-action@2226d7cb06a077cd73e56eedd38eecad18e5d837  # v6.5.0
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the
          # latest version. When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash
          # of a commit.
          version: latest

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          # args: --timeout=30m --config=/my/path/.golangci.yml --issues-exit-code=0
          args: --verbose
            --tests=true
            --timeout=6m
            --config=.github/linters/.golangci.yml
            --issues-exit-code=1

      - name: pre-build
        id: prebuild
        shell: bash
        run: |
          set -x
          echo "pre-building"
          appversion=$(git describe --tags | awk '{gsub(/ /, "_"); print}')
          buildtime=$(date -u "+%Y-%m-%dT%TZ")
          goversion=$(go version | awk '{gsub(/ /, "_"); print}')
          echo "GLDFLAGS=-s -w -X=${VPATH}.AppVersion=${appversion} -X=${VPATH}.Branch=${GITHUB_REF} -X=${VPATH}.BuildTime=${buildtime} -X=${VPATH}.Commit=${{ github.sha }} -X=${VPATH}.GoVersion=${goversion}" >> "$GITHUB_ENV"

      - name: go build
        shell: bash
        env:
          APP_NAME: ${{ env.APP }}
          GLDFLAGS: ${{ env.GLDFLAGS }}
          TARGET_DIR: dist
        run: |
          set -x
          go env
          mkdir "$TARGET_DIR"
          go build -x -v -ldflags="${GLDFLAGS}" \
            -o "$TARGET_DIR/$APP_NAME" "cmd/$APP_NAME/main.go"
          "$TARGET_DIR/$APP_NAME" -version
