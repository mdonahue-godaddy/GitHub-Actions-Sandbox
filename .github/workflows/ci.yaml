---
name: CI

on:
  # Scan on-demand through GitHub Actions interface:
  workflow_dispatch: {}
  # Scan workflow call:
  workflow_call:
  # Scan mainline branches and report all findings:
  push:
    branches: ["main"]
  # Scan changed files in PRs (diff-aware scanning):
  pull_request:
    branches: ["main"]

# Don't grant any access by default
permissions: {}

env:
  TARGET_REF: ${{ github.head_ref || github.ref_name }}
  GO111MODULE: on
  GOPRIVATE: ""
  APP: "co-pilot-reporting"
  COV: "./coverage"
  GCOV: "./coverage.gcov"
  LCOV: "./coverage.lcov"
  VPATH: "github.com/gdcorp-engineering/co-pilot-reporting/internal/version"

jobs:
  ci:
    name: ci

    strategy:
      matrix:
        go-version: ['stable']  # only use ONE version of go here or the upload-artifact will fail

    runs-on: ['ubuntu-latest']

    ############################################
    # Grant minimal permissions
    ############################################
    permissions:
      contents: read
      statuses: write

    steps:
      - name: actions/checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          # Needed to get tags for versioning
          fetch-depth: 0

      - name: actions/setup-go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5  # v5.5.0
        with:
          go-version: ${{ matrix.go-version }}

      - name: nslookup
        continue-on-error: true
        shell: bash
        run: |
          set -x
          nslookup i.do.not.exist.com

      - name: go version, env, & clean --cache
        shell: bash
        run: |
          set -x
          go version
          go env
          go clean --cache

      - name: go mod tidy
        shell: bash
        run: |
          set -x
          go mod tidy

      - name: golangci/golangci-lint-action
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9  # v8.0.0
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the
          # latest version. When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash
          # of a commit.
          version: latest

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          # args: --timeout=30m --config=/my/path/.golangci.yml --issues-exit-code=0
          args: --verbose
            --tests=true
            --timeout=1m
            --config=.github/linters/.golangci.yml
            --issues-exit-code=1

      - uses: gitleaks/gitleaks-action@ff98106e4c7b2bc287b24eaf42907196329070c7  # v2.3.9
        env:
          GITLEAKS_CONFIG: .github/linters/.gitleaks.toml
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}} # Only required for Organizations, not personal accounts.

      - name: go test
        shell: bash
        run: |
          set -x
          go env
          go test -v -race -coverprofile=coverage.gcov -covermode=atomic ./...
          go test -v -coverprofile=coverage.gcov -covermode=count ./...
          go tool cover -func=coverage.gcov -o=coverage.out

      - name: pre-build
        id: prebuild
        run: |
          echo "pre-building"
          goversion=$(go version)
          echo "goversion=${goversion}"
          echo "goversion=${goversion}" >> "$GITHUB_OUTPUT"
          appversion=$(git describe --tags)
          echo "appversion=${appversion}"
          echo "appversion=${appversion}" >> "$GITHUB_OUTPUT"
          buildtime=$(date -u "+%Y-%m-%dT%TZ")
          echo "buildtime=${buildtime}"
          echo "buildtime=${buildtime}" >> "$GITHUB_OUTPUT"

      - name: go build
        run: |
          go env
          mkdir dist
          APP=sandbox
          go build -x -v -ldflags="-s -w \
            -X 'internal/version.AppVersion=${{ steps.prebuild.outputs.appversion }}' \
            -X 'internal/version.Branch=${{ env.target_ref }}' \
            -X 'internal/version.BuildTime=${{ steps.prebuild.outputs.buildtime }}' \
            -X 'internal/version.Commit=${{ github.sha }}' \
            -X 'internal/version.GoVersion=${{ steps.prebuild.outputs.goversion }}'" \
            -o dist/${APP} cmd/${APP}/main.go

      # Upload generated artifacts for historical reference
      - name: actions/upload-artifact
        id: artifact-upload-step
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: test-reports
          path: ./coverage.*
          retention-days: 90

      - name: Show Artifact ID
        run: |
          echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'
