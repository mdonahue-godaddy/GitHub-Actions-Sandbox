---
## Config for golangci-lint v1.62.0+

# Options for analysis running.
run:
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 5m
  # Exit code when at least one issue was found.
  # Default: 1
  issues-exit-code: 1
  # Include test files or not.
  # Default: true
  tests: true
  # List of build tags, all linters use it.
  # Default: []
  # build-tags:
  #   - mytag
  # If set, we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # Default: ""
  modules-download-mode: readonly
  # Allow multiple parallel golangci-lint instances running.
  # If false, golangci-lint acquires file lock on start.
  # Default: false
  # allow-parallel-runners: false
  # Allow multiple golangci-lint instances running, but serialize them around a lock.
  # If false, golangci-lint exits with an error if it fails to acquire file lock on start.
  # Default: false
  # allow-serial-runners: false
  # Define the Go version limit.
  # Mainly related to generics support since go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.17
  # go: '1.19'
  # Number of operating system threads (`GOMAXPROCS`) that can execute golangci-lint simultaneously.
  # If it is explicitly set to 0 (i.e. not the default) then golangci-lint will automatically set the value to match Linux container CPU quota.
  # Default: the number of logical CPUs in the machine
  concurrency: 4


# output configuration options
output:
  # The formats used to render issues.
  # Formats:
  # - `colored-line-number`
  # - `line-number`
  # - `json`
  # - `colored-tab`
  # - `tab`
  # - `html`
  # - `checkstyle`
  # - `code-climate`
  # - `junit-xml`
  # - `junit-xml-extended`
  # - `github-actions`
  # - `teamcity`
  # - `sarif`
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  #
  # For the CLI flag (`--out-format`), multiple formats can be specified by separating them by comma.
  # The output can be specified for each of them by separating format name and path by colon symbol.
  # Example: "--out-format=checkstyle:report.xml,json:stdout,colored-line-number"
  # The CLI flag (`--out-format`) override the configuration file.
  #
  # Default:
  #   formats:
  #     - format: colored-line-number
  #       path: stdout
  formats:
    - format: colored-line-number
      path: stdout
  # Print lines of code with issue.
  # Default: true
  # print-issued-lines: true
  # Print linter name in the end of issue text.
  # Default: true
  # print-linter-name: true
  # Make issues output unique by line.
  # Default: true
  # uniq-by-line: true
  # Add a prefix to the output file references.
  # Default: ""
  # path-prefix: ""
  # Sort results by the order defined in `sort-order`.
  # Default: false
  sort-results: true
  # Order to use when sorting results.
  # Require `sort-results` to `true`.
  # Possible values: `file`, `linter`, and `severity`.
  #
  # If the severity values are inside the following list, they are ordered in this order:
  #   1. error
  #   2. warning
  #   3. high
  #   4. medium
  #   5. low
  # Either they are sorted alphabetically.
  #
  # Default: ["file"]
  sort-order:
    - linter
    - severity
    - file # filepath, line, and column.
  # Show statistics per linter.
  # Default: false
  show-stats: true


linters:
  # Disable all linters.
  # Default: false
  disable-all: true
  # Enable specific linter
  # https://golangci-lint.run/usage/linters/#enabled-by-default
  enable:
    - asasalint  # checks for pass []any as any in variadic func(...any)
    - asciicheck  # checks that your code does not contain non-ASCII identifiers
    - bidichk  # checks for dangerous unicode character sequences
    - bodyclose  # checks whether HTTP response body is closed successfully
    # - containedctx  # detects struct contained context.Context field
    # - contextcheck  # [too many false positives] checks the function whether use a non-inherited context
    # - cyclop  # checks function and package cyclomatic complexity
    # - deadcode  # [deprecated, replaced by unused] finds unused code
    - decorder  # check declaration order and count of types, constants, variables and functions
    # - depguard  # [replaced by gomodguard] checks if package imports are in a list of acceptable packages
    # - dogsled  # checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    # - dupl  # tool for code clone detection
    # - dupword  # [useless without config] checks for duplicate words in the source code
    - durationcheck  # checks for two durations multiplied together
    # - errchkjson  # [don't see profit + I'm against of omitting errors like in the first example
    #   https://github.com/breml/errchkjson] checks types passed to the json encoding functions.
    #   Reports unsupported types and optionally reports occasions, where the check for the returned error
    #   can be omitted.
    - errname  # checks that sentinel errors are prefixed with the Err and error types are suffixed with the
    #    Error
    - errorlint  # finds code that will cause problems with the error wrapping scheme introduced in Go 1.13
    - exhaustive  # checks exhaustiveness of enum switch statements
    # - exhaustruct  # [highly recommend to enable] checks if all structure fields are initialized
    # - forbidigo  # forbids identifiers
    # - forcetypeassert  # [replaced by errcheck] finds forced type assertions
    # - funlen  # tool for detection of long functions
    - gci  # controls golang package import order and makes it always deterministic
    - ginkgolinter  # [if you use ginkgo/gomega] enforces standards of using ginkgo and gomega
    - gocheckcompilerdirectives  # validates go compiler directive comments (//go:)
    # - gochecknoglobals  # checks that no global variables exist
    - gochecknoinits  # checks that no init functions are present in Go code
    # - gocognit  # computes and checks the cognitive complexity of functions
    - goconst  # finds repeated strings that could be replaced by a constant
    - gocritic  # provides diagnostics that check for bugs, performance and style issues
    # - gocyclo  # computes and checks the cyclomatic complexity of functions
    - godot  # checks if comments end in a period
    - godox  # detects FIXME, TODO and other comment keywords
    # - goerr113  # [too strict] checks the errors handling expressions
    # - gofmt  # [replaced by goimports] checks whether code was gofmt-ed
    # - gofumpt  # [replaced by goimports, gofumports is not available yet] checks whether code was gofumpt-ed
    - goheader  # checks is file header matches to pattern
    - goimports  # in addition to fixing imports, goimports also formats your
    #   code in the same style as gofmt
    # - golint  # [deprecated, replaced by revive] golint differs from gofmt.
    #   Gofmt reformats Go source code, whereas golint prints out style mistakes
    - gomoddirectives  # manages the use of 'replace', 'retract', and 'excludes' directives in go.mod
    - gomodguard  # allow and block lists linter for direct Go module
    #   dep3endencies. This is different from depguard where there are different
    #   block types for example version constraints and module recommendations
    - goprintffuncname  # checks that printf-like functions are named with f at the end
    - gosec  # inspects source code for security problems
    - gosimple  # specializes in simplifying a code
    - govet  # reports suspicious constructs, such as Printf calls whose
    #   arguments do not align with the format string
    # - grouper  # analyzes expression groups
    # - ifshort  # [deprecated] checks that your code uses short syntax for
    #   if-statements whenever possible
    # - importas  # enforces consistent import aliases
    - ineffassign  # detects when assignments to existing variables are not used
    - interfacebloat  # checks the number of methods inside an interface
    # - interfacer  # [deprecated] suggests narrower interface types
    - ireturn  # accept interfaces, return concrete types
    - lll  # reports long lines
    - loggercheck  # checks key value pairs for common logger libraries (kitlog,klog,logr,zap)
    # - maintidx  # measures the maintainability index of each function
    - makezero   # finds slice declarations with non-zero initial length
    # - maligned  # [deprecated, replaced by govet fieldalignment] detects Go
    #   structs that would take less memory if their fields were sorted
    # - misspell  # [useless] finds commonly misspelled English words in comments
    - musttag  # enforces field tags in (un)marshaled structs
    - nakedret  # finds naked returns in functions greater than a specified function length
    # - nestif  # reports deeply nested if statements
    - nilerr  # finds the code that returns nil even if it checks that the error is not nil
    - nilnil  # checks that there is no simultaneous return of nil error and an invalid value
    # - nlreturn  # [too strict and mostly code is not more readable] checks for
    #   a new line before return and branch statements to increase code clarity
    - noctx  # finds sending http request without context.Context
    - nolintlint  # reports ill-formed or insufficient nolint directives
    - nonamedreturns  # reports all named returns
    # - nosnakecase  # [deprecated, replaced by revive var-naming] detects snake
    #   case of variable naming and function name
    - nosprintfhostport  # checks for misuse of Sprintf to construct a host with port in a URL
    # - paralleltest  # [too many false positives] detects missing usage of
    #   t.Parallel() method in your Go test
    - prealloc  # [premature optimization, but can be used in some cases] finds
    #   slice declarations that could potentially be preallocated
    - predeclared  # finds code that shadows one of Go's predeclared identifiers
    - promlinter  # checks Prometheus metrics naming via promlint
    - reassign  # checks that package variables are not reassigned
    - revive  # fast, configurable, extensible, flexible, and beautiful linter
    #   for Go, drop-in replacement of golint
    - rowserrcheck  # checks whether Err of rows is checked successfully
    # - scopelint  # [deprecated, replaced by exportloopref] checks for unpinned variables in go programs
    - sqlclosecheck  # checks that sql.Rows and sql.Stmt are closed
    # - staticcheck  # is a go vet on steroids, applying a ton of static analysis checks
    # - structcheck  # [deprecated, replaced by unused] finds unused struct fields
    # - stylecheck  # is a replacement for golint
    # - tagliatelle  # checks the struct tags
    - tenv  # detects using os.Setenv instead of t.Setenv since Go1.17
    - testableexamples  # checks if examples are testable (have an expected output)
    - testpackage  # makes you use a separate _test package
    # - thelper  # detects golang test helpers without t.Helper() call and checks
    #   the consistency of test helpers
    - tparallel  # detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert  # removes unnecessary type conversions
    - unparam  # reports unused function parameters
    - unused  # checks for unused constants, variables, functions and types
    - usestdlibvars  # detects the possibility to use variables/constants from the Go standard library
    # - varcheck  # [deprecated, replaced by unused] finds unused global variables and constants
    - varnamelen  # [great idea, but too many false positives] checks that the
    #   length of a variable's name matches its scope
    - wastedassign  # finds wasted assignment statements
    - whitespace  # detects leading and trailing whitespace
    - wrapcheck  # checks that errors returned from external packages are wrapped
    # - wsl  # [too strict and mostly code is not more readable] whitespace linter
    #   forces you to use empty lines


# This file contains only configs which differ from defaults.
# All possible options can be found here
# https://github.com/golangci/golangci-lint/blob/master/.golangci.reference.yml
linters-settings:
  cyclop:
    # The maximal code complexity to report.
    # Default: 10
    max-complexity: 30
    # The maximal average package complexity.
    # If it's higher than 0.0 (float) the check is enabled
    # Default: 0.0
    package-average: 10.0

  errchkjson:
    # With check-error-free-encoding set to true, errchkjson does warn about
    # errors from json encoding functions that are safe to be ignored,
    # because they are not possible to happen.
    #
    # if check-error-free-encoding is set to true and errcheck linter is
    # enabled, it is recommended to add the following exceptions to prevent from
    # false positives:
    #
    #     linters-settings:
    #       errcheck:
    #         exclude-functions:
    #           - encoding/json.Marshal
    #           - encoding/json.MarshalIndent
    #
    # Default: false
    check-error-free-encoding: false

    # Issue on struct encoding that doesn't have exported fields.
    # Default: false
    report-no-exported: false

  exhaustive:
    # Program elements to check for exhaustiveness.
    # Default: [ switch ]
    check:
      - switch
      - map

  exhaustruct:
    # List of regular expressions to exclude struct packages and names from
    # check.
    # Default: []
    exclude:
      # std libs
      - "^net/http.Client$"
      - "^net/http.Cookie$"
      - "^net/http.Request$"
      - "^net/http.Response$"
      - "^net/http.Server$"
      - "^net/http.Transport$"
      - "^net/url.URL$"
      - "^os/exec.Cmd$"
      - "^reflect.StructField$"
      # public libs
      # - "^github.com/Shopify/sarama.Config$"
      # - "^github.com/Shopify/sarama.ProducerMessage$"
      # - "^github.com/mitchellh/mapstructure.DecoderConfig$"
      # - "^github.com/prometheus/client_golang/.+Opts$"
      # - "^github.com/spf13/cobra.Command$"
      # - "^github.com/spf13/cobra.CompletionOptions$"
      # - "^github.com/stretchr/testify/mock.Mock$"
      # - "^github.com/testcontainers/testcontainers-go.+Request$"
      # - "^github.com/testcontainers/testcontainers-go.FromDockerfile$"
      # - "^golang.org/x/tools/go/analysis.Analyzer$"
      # - "^google.golang.org/protobuf/.+Options$"
      # - "^gopkg.in/yaml.v3.Node$"

  funlen:
    # Checks the number of lines in a function.
    # If lower than 0, disable the check.
    # Default: 60
    lines: 60
    # Checks the number of statements in a function.
    # If lower than 0, disable the check.
    # Default: 40
    statements: 40

  gocognit:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 34

  gocritic:
    # Settings passed to gocritic.
    # The settings key is the name of a supported gocritic checker.
    # The list of supported checkers can be find in
    # https://go-critic.github.io/overview.
    settings:
      captLocal:
        # Whether to restrict checker to params only.
        # Default: true
        paramsOnly: false
      underef:
        # Whether to skip (*x).method() calls where x is a pointer receiver.
        # Default: true
        skipRecvDeref: false
        # enabled-tags:
        #   - diagnostic
        #   - experimental
        #   - opinionated
        #   - performance
        #   - style
        # disabled-checks:
        #   - singleCaseSwitch
        #   - dupImport # https://github.com/go-critic/go-critic/issues/845
        #   - ifElseChain
        #   - octalLiteral
        #   - whyNoLint

  gomnd:
    # List of function patterns to exclude from analysis.
    # Values always ignored: `time.Date`,
    # `strconv.FormatInt`, `strconv.FormatUint`, `strconv.FormatFloat`,
    # `strconv.ParseInt`, `strconv.ParseUint`, `strconv.ParseFloat`.
    # Default: []
    ignored-functions:
    #  - os.Chmod
    #  - os.Mkdir
    #  - os.MkdirAll
    #  - os.OpenFile
    #  - os.WriteFile
    #  - prometheus.ExponentialBuckets
    #  - prometheus.ExponentialBucketsRange
    #  - prometheus.LinearBuckets

  gomodguard:
    blocked:
      # List of blocked modules.
      # Default: []
      modules:
        - github.com/golang/protobuf:
            recommendations:
              - google.golang.org/protobuf
            reason: "google.golang.org/protobuf is an updated version"
            # see https://developers.google.com/protocol-buffers/docs/reference/go/faq#modules
        - github.com/satori/go.uuid:
            recommendations:
              - github.com/google/uuid
            reason: "satori's package is not maintained"
        - github.com/gofrs/uuid:
            recommendations:
              - github.com/google/uuid
            reason: "gofrs' package is not go module"

  gosec:
    # To select a subset of rules to run.
    # Available rules: https://github.com/securego/gosec#available-rules
    # Default: [] - means include all rules
    includes:
    #  - G101 # Look for hard coded credentials

    # To specify a set of rules to explicitly exclude.
    # Available rules: https://github.com/securego/gosec#available-rules
    # Default: []
    excludes:
    #  - G112 # TEMPORARY GrandFather for ...

    # Exclude generated files
    # Default: false
    exclude-generated: true

  govet:
    # Enable all analyzers.
    # Default: false
    enable-all: true
    # Disable analyzers by name.
    # Run `go tool vet help` to see all analyzers.
    # Default: []
    disable:
      - fieldalignment  # too strict
    # Settings per analyzer.
    settings:
      shadow:
      #   Whether to be strict about shadowing; can be noisy.
      #   Default: false
      #   strict: true

  nakedret:
    # Make an issue if func has more lines of code than this setting, and it
    # has naked returns.
    # Default: 30
    max-func-lines: 0

  nolintlint:
    # Exclude following linters from requiring an explanation.
    # Default: []
    allow-no-explanation: [funlen, gocognit, lll]
    # Enable to require an explanation of nonzero length after each nolint
    # directive.
    # Default: false
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being
    # suppressed.
    # Default: false
    require-specific: true

  rowserrcheck:
    # database/sql is always checked
    # Default: []
    packages:
      - github.com/jmoiron/sqlx

  tenv:
    # The option `all` will run against whole test files (`_test.go`)
    # regardless of method/function signatures. Otherwise, only methods that
    # take `*testing.T`, `*testing.B`, and `testing.TB` as arguments are
    # checked.
    # Default: false
    all: true


issues:
  # List of regexps of issue texts to exclude.
  #
  # But independently of this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`.
  # To list all excluded by default patterns execute `golangci-lint run --help`
  #
  # Default: https://golangci-lint.run/usage/false-positives/#default-exclusions
  # exclude:
  #   - abcdef
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - bodyclose
        - dupl
        - errcheck
        - exhaustruct
        - funlen
        - goconst
        - gocyclo
        - gosec
        - noctx
        - revive
        - wrapcheck
    # Run some linter only for test files by excluding its issues for everything else.
    - path-except: _test\.go
      linters:
        - forbidigo
    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via `nolint` comments.
    # `/` will be replaced by current OS file path separator to properly work on Windows.
    # - path: internal/hmac/
    #  text: "weak cryptographic primitive"
    #  linters:
    #    - gosec
    # Exclude some `staticcheck` messages.
    #- linters:
    #    - staticcheck
    #  text: "SA9003:"
    # Exclude `lll` issues for long lines with `go:generate`.
    - linters:
        - lll
      source: "^//go:generate "
    - linters:
        - godot
      source: "(noinspection|TODO)"
    - linters:
        - gocritic
      source: "//noinspection"
    - linters:
        - errorlint
      source: "^\\s+if _, ok := err\\.\\([^.]+\\.InternalError\\); ok {"
  # Independently of option `exclude` we use default exclude patterns,
  # it can be disabled by this option.
  # To list all excluded by default patterns execute `golangci-lint run --help`.
  # Default: true
  # exclude-use-default: false
  # If set to true, `exclude` and `exclude-rules` regular expressions become case-sensitive.
  # Default: false
  # exclude-case-sensitive: false
  # Which dirs to exclude: issues from them won't be reported.
  # Can use regexp here: `generated.*`, regexp is applied on full path,
  # including the path prefix if one is set.
  # Default dirs are skipped independently of this option's value (see exclude-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  # Default: []
  # exclude-dirs:
  #  - src/external_libs
  #  - autogenerated_by_my_lib
  # Enables exclude of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # Default: true
  exclude-dirs-use-default: false
  # Which files to exclude: they will be analyzed, but issues from them won't be reported.
  # There is no need to include all autogenerated files,
  # we confidently recognize autogenerated files.
  # If it's not, please let us know.
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  # Default: []
  # exclude-files:
  #  - ".*\\.my\\.go$"
  #  - lib/bad.go
  # Mode of the generated files analysis.
  #
  # - `strict`: sources are excluded by following strictly the Go generated file convention.
  #    Source files that have lines matching only the following regular expression will be excluded: `^// Code generated .* DO NOT EDIT\.$`
  #    This line must appear before the first non-comment, non-blank text in the file.
  #    https://go.dev/s/generatedcode
  # - `lax`: sources are excluded if they contain lines `autogenerated file`, `code generated`, `do not edit`, etc.
  # - `disable`: disable the generated files exclusion.
  #
  # Default: lax
  exclude-generated: strict
  # The list of ids of default excludes to include or disable.
  # https://golangci-lint.run/usage/false-positives/#default-exclusions
  # Default: []
  # include:
  #  - EXC0001
  #  - EXC0002
  #  - EXC0003
  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0
  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 50
  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing large codebase.
  # It's not practical to fix all existing issues at the moment of integration:
  # much better don't allow issues in new code.
  #
  # Default: false
  # new: true
  # Show only new issues created after git revision `REV`.
  # Default: ""
  # new-from-rev: HEAD
  # Show only new issues created in git patch with set file path.
  # Default: ""
  # new-from-patch: path/to/patch/file
  # Show issues in any part of update files (requires new-from-rev or new-from-patch).
  # Default: false
  # whole-files: true
  # Fix found issues (if it's supported by the linter).
  # Default: false
  # fix: true


severity:
  # Set the default severity for issues.
  #
  # If severity rules are defined and the issues do not match or no severity is provided to the rule
  # this will be the default severity applied.
  # Severities should match the supported severity names of the selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#SeverityLevel
  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  # - TeamCity: https://www.jetbrains.com/help/teamcity/service-messages.html#Inspection+Instance
  #
  # `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...)
  #
  # Default: ""
  # default-severity: error
  # If set to true `severity-rules` regular expressions become case-sensitive.
  # Default: false
  # case-sensitive: true
  # When a list of severity rules are provided, severity information will be added to lint issues.
  # Severity rules have the same filtering capability as exclude rules
  # except you are allowed to specify one matcher per severity rule.
  #
  # `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...)
  #
  # Only affects out formats that support setting severity information.
  #
  # Default: []
  # rules:
  #  - linters:
  #      - dupl
  #    severity: info
